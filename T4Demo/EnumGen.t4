<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.IO" #>
<#+
  void GenerateEnum(string[] properties) {
    ClearOutput(); // Clear any spurious leading newlines
    GenerateJs(properties);
    SaveOutput("T4Demo/Scripts/Enums/{0}.js");
    ClearOutput();
    GenerateCs(properties);
  }

  void GenerateCs(string[] properties)
  {
      GenerateWarning();
#>
public enum <#=Path.GetFileNameWithoutExtension(Host.TemplateFile)#> {
<#+
      for (var i = 1; i <= properties.Length; ++i)
      {
#>
    <#=properties[i-1] #> = <#=i#><#=i==properties.Length?"":","#>
<#+
      }
#>
}
<#+
  }

  void GenerateJs(string[] properties)
  {
      GenerateWarning();
#>
const <#=Path.GetFileNameWithoutExtension(Host.TemplateFile)#> = Object.freeze({
<#+
      for (var i = 1; i <= properties.Length; ++i)
      {
#>
    <#=properties[i-1].ToUpper() #>: <#=i#><#=i==properties.Length?"":","#>
<#+
      }
#>
});
<#+
  }

  void GenerateWarning()
  {
#>
//------------------------------------------------------------------------------
// <auto-generated>
//   This file is auto-generated and should not be edited directly. If you want
//   to make changes to this file, you can do so by editing the underlying file
//   at <#=Host.TemplateFile.Substring(GetSolutionDirectory().Length + 1)#>
// </auto-generated>
//------------------------------------------------------------------------------
<#+
  }

  void ClearOutput()
  {
      GenerationEnvironment.Clear();
  }

  void SaveOutput(string relativePathTemplate)
  {
      string outputFilePath = Path.Combine(
          GetSolutionDirectory(),
          String.Format(
              relativePathTemplate,
              Path.GetFileNameWithoutExtension(Host.TemplateFile)));
      File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString());
  }

  string GetSolutionDirectory()
  {
      IServiceProvider serviceProvider = (IServiceProvider) Host;
      DTE dte = serviceProvider.GetService(typeof(DTE)) as DTE;
	  Solution solution = dte.Solution;
      return Path.GetDirectoryName(solution.FullName);
  }
#>
